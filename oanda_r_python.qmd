---
title: "Oanda_Application"
format: 
  html:
    theme: cerulean
    fontsize: 12px
    max-width: 1600px
    #code-fold: False
    code-summary: "Show the code"
    code-fold: show
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(reticulate)
use_condaenv("~/anaconda3/envs/ML_gpu/bin/python3.9") 
```

```{python}
#| echo: true
#| output: false
import pandas as pd
import tpqoa
api = tpqoa.tpqoa("./oanda.cfg")
api.get_instruments()

forex_M1_EUR_USD = api.get_history(instrument = "EUR_USD", start = "2022-11-01", end = "2022-12-31", granularity = "M1", price = "M", localize = False)

forex_D_EUR_USD = api.get_history(instrument = "EUR_USD", start = "2010-01-01", end = "2022-12-31", granularity = "D", price = "M", localize = False)
  
forex_M1_EUR_USD.to_csv("./data/forex_M1_EUR_USD.csv")
forex_D_EUR_USD.to_csv("./data/forex_D_EUR_USD.csv")
```

You can add options to executable code like this

```{python}
#| echo: true
#| output: false
#api.stream_data("EUR_USD", stop = 20) 
api.create_order(instrument = "EUR_USD", units = 100000)
```

```{python}
import pandas as pd
import numpy as np
import tpqoa
from datetime import datetime, timedelta
import time
```

```{python}
#| echo: true
#| output: true
days = 5
now = datetime.utcnow() #- timedelta(days = 10)
now = now - timedelta(microseconds = now.microsecond)
past = now - timedelta(days = days)
df = api.get_history(instrument = "EUR_USD", start = "2010-01-01", end = "2010-01-10", granularity = "H1", price = "B",
localize = True).c.dropna().to_frame()
df.rename(columns = {"c":"EUR_USD"}, inplace = True)
df.to_csv('./your_array.csv', header=True, index=True)
df.resample("1min", label = "right").last().dropna().iloc[:-1]
df["SMA_7days"] = df.EUR_USD.rolling(7).mean()
df
```

```{r}
#| echo: true
#| output: false
#| warning: false
library(ichimoku)
library(data.table)
library(tidyverse)
library(config)
library(lubridate)
library(zoo)
library(RcppRoll)
library(tictoc)

EUR_USD_bid <- 
  oanda("EUR_USD", from = "2010-01-01", to = Sys.Date() - days(1), price = "M", granularity = "M1", 
        apikey = config::get("access_token")) %>% 
  as.data.table()

EUR_USD_bid[, time:=as.Date(time)]
xy <- c("open", "high", "low", "close", "volume")
xy_newnames <- paste0(xy,"_bid")
setnames(EUR_USD_bid,xy,xy_newnames)

xy_SMA_7days <- paste0(xy_newnames, "_SMA_7days")
xy_SD_7days <- paste0(xy_newnames, "_SD_7days")


EUR_USD_bid[, (xy_SMA_7days):=lapply(.SD, roll_mean, n = 7, fill=NA, align="right"), .SDcols=xy_newnames]
EUR_USD_bid[, (xy_SD_7days):=lapply(.SD, roll_sd, n = 7, fill=NA, align="right"), .SDcols=xy_newnames]

setkey(EUR_USD_bid, time)
# python code
# data.price.rolling(7).mean()
EUR_USD_ask <- oanda("EUR_USD", from = "2010-01-01", to = Sys.Date() - days(1), price = "A", granularity = "D", 
                     apikey = config::get("access_token")) %>% as.data.table()
EUR_USD_ask[, time:=as.Date(time)]
xy <- c("open", "high", "low", "close", "volume")
xy_newnames <- paste0(xy,"_ask")
setnames(EUR_USD_ask,xy,xy_newnames)
xy_SMA_7days <- paste0(xy_newnames, "_SMA_7days")
EUR_USD_ask[, (xy_SMA_7days):=lapply(.SD, frollmean, n = 7, fill=NA), .SDcols=xy_newnames]

setkey(EUR_USD_ask, time)
EUR_USD_bid_ask <- merge.data.table(EUR_USD_bid, EUR_USD_ask)
EUR_USD_bid_ask[,c("complete.x", "complete.y")] <- NULL

#EUR_USD_bid_ask[, SellorBuy:=ifelse(close_bid > open_ask, "sell", ifelse())]
```

```{r}
#| echo: true


library(plotly)
library(dygraphs)
library(lubridate)
library(data.table)

forex_M1_EUR_USD <- data.table::fread("./data/forex_M1_EUR_USD.csv") %>% as_tibble()
forex_D_EUR_USD <- data.table::fread("./data/forex_D_EUR_USD.csv")

forex_M1_EUR_USD <- forex_M1_EUR_USD %>%
  mutate(time_NY = with_tz(time, tzone = "America/New_York"))

start_time <- as.POSIXct("2022-11-10 00:00:00", tz = "UTC")
end_time <- as.POSIXct("2022-11-10 23:59:59", tz="UTC")

forex_M1_EUR_USD_sel <- 
  forex_M1_EUR_USD %>% 
  filter(between(time, start_time, end_time))
  



start_time <- as.POSIXct("2010-01-01 00:00:00", tz = "UTC")

forex_D_EUR_USD_sel <- 
  forex_D_EUR_USD %>% 
  filter(time >= start_time)

plot <- ggplot(data = forex_M1_EUR_USD_sel, aes(time)) +
  geom_line(aes(y=o), colour = "blue")
ggplotly(plot)
```

